[
  {
    "id": "ex1",
    "title": "Fibonacci with memoization",
    "description": "Top-down DP memoized Fibonacci.",
    "code": "from functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef fib(n: int) -> int:\n    if n < 2:\n        return n\n    return fib(n-1) + fib(n-2)\n\nprint(fib(10))"
  },
  {
    "id": "ex2",
    "title": "Binary search",
    "description": "Iterative binary search in a sorted list.",
    "code": "from typing import List, Optional\n\ndef binary_search(a: List[int], x: int) -> int:\n    lo, hi = 0, len(a) - 1\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if a[mid] == x:\n            return mid\n        if a[mid] < x:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    return -1"
  },
  {
    "id": "ex3",
    "title": "FastAPI minimal endpoint",
    "description": "Simple FastAPI app with a GET endpoint.",
    "code": "from fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get('/ping')\ndef ping():\n    return {'status': 'ok'}"
  },
  {
    "id": "ex4",
    "title": "Read CSV with pandas",
    "description": "Load a CSV and compute basic stats.",
    "code": "import pandas as pd\n\ndf = pd.read_csv('data.csv')\nprint(df.describe())"
  },
  {
    "id": "ex5",
    "title": "Async HTTP with aiohttp",
    "description": "Fetch multiple URLs concurrently.",
    "code": "import asyncio\nimport aiohttp\n\nasync def fetch(session, url):\n    async with session.get(url) as resp:\n        return await resp.text()\n\nasync def main(urls):\n    async with aiohttp.ClientSession() as session:\n        results = await asyncio.gather(*(fetch(session, u) for u in urls))\n        print(len(results))\n\nasyncio.run(main(['https://example.com']))"
  },
  {
    "id": "ex6",
    "title": "Decorator for timing",
    "description": "Measure function runtime.",
    "code": "import time\nfrom typing import Callable\n\ndef timed(fn: Callable):\n    def wrapper(*args, **kwargs):\n        start = time.perf_counter()\n        try:\n            return fn(*args, **kwargs)\n        finally:\n            dur = (time.perf_counter() - start) * 1000\n            print(f'{fn.__name__} took {dur:.2f} ms')\n    return wrapper"
  }
]